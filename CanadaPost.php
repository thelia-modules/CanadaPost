<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace CanadaPost;

use CanadaPost\Model\Config\CanadaPostConfigValue;
use Thelia\Model\Country;
use Thelia\Model\OrderPostage;
use Thelia\Module\BaseModule;
use Propel\Runtime\Connection\ConnectionInterface;
use Thelia\Install\Database;
use Thelia\Module\DeliveryModuleInterface;
use Thelia\Module\Exception\DeliveryException;

/**
 * Class CanadaPost
 * @package CanadaPost
 */
class CanadaPost extends BaseModule implements DeliveryModuleInterface
{
    const MESSAGE_DOMAIN = "canadapost";
    const ROUTER = "router.canadapost";

    public function postActivation(ConnectionInterface $con = null)
    {
        /*
        $database = new Database($con);

        $database->insertSql(null, [__DIR__ . "/Config/create.sql", __DIR__ . "/Config/insert.sql"]);
        */

        $this->initializeConfig();

    }

    protected function initializeConfig()
    {
        $defaults = [
            CanadaPostConfigValue::ENABLED => 0,
            CanadaPostConfigValue::MODE_PRODUCTION => 0,
            CanadaPostConfigValue::CUSTOMER_NUMBER => '',
            CanadaPostConfigValue::USERNAME => '',
            CanadaPostConfigValue::PASSWORD => '',
            CanadaPostConfigValue::TEST_USERNAME => '',
            CanadaPostConfigValue::TEST_PASSWORD => '',
            CanadaPostConfigValue::CONTRACT_ID => '',
            CanadaPostConfigValue::QUOTE_TYPE_COMMERCIAL => 0,
            CanadaPostConfigValue::INSURANCE => 0,
            CanadaPostConfigValue::ORIGIN_POSTALCODE => '',
            CanadaPostConfigValue::DISALLOWED_SERVICES => '',
        ];

        foreach ($defaults as $configName => $configValue) {
            if (null === CanadaPost::getConfigValue($configName)) {
                CanadaPost::setConfigValue($configName, $configValue);
            }
        }
    }

    /**
     * This method is called by the Delivery  loop, to check if the current module has to be displayed to the customer.
     * Override it to implements your delivery rules/
     *
     * If you return true, the delivery method will de displayed to the customer
     * If you return false, the delivery method will not be displayed
     *
     * @param Country $country the country to deliver to.
     *
     * @return boolean
     */
    public function isValidDelivery(Country $country)
    {
        // TODO: Implement isValidDelivery() method.
    }

    /**
     * Calculate and return delivery price in the shop's default currency
     *
     * @param Country $country the country to deliver to.
     *
     * @return OrderPostage|float             the delivery price
     * @throws DeliveryException if the postage price cannot be calculated.
     */
    public function getPostage(Country $country)
    {
        // TODO: Implement getPostage() method.
    }

    /**
     *
     * This method return true if your delivery manages virtual product delivery.
     *
     * @return bool
     */
    public function handleVirtualProductDelivery()
    {
        return false;
    }
}
