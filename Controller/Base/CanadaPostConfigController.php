<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace CanadaPost\Controller\Base;

use CanadaPost\CanadaPost;
use Thelia\Controller\Admin\BaseAdminController;
use Thelia\Form\Exception\FormValidationException;
use CanadaPost\Model\Config\CanadaPostConfigValue;

/**
 * Class CanadaPostConfigController
 * @package CanadaPost\Controller\Base
 * @author TheliaStudio
 */
class CanadaPostConfigController extends BaseAdminController
{
    public function defaultAction()
    {
        return $this->render("canadapost-configuration");
    }

    public function saveAction()
    {
        $baseForm = $this->createForm("canadapost.configuration");

        $errorMessage = null;

        try {
            $form = $this->validateForm($baseForm);
            $data = $form->getData();

            CanadaPost::setConfigValue(CanadaPostConfigValue::ENABLED, is_bool($data["enabled"]) ? (int) ($data["enabled"]) : $data["enabled"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::MODE_PRODUCTION, is_bool($data["mode_production"]) ? (int) ($data["mode_production"]) : $data["mode_production"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::CUSTOMER_NUMBER, is_bool($data["customer_number"]) ? (int) ($data["customer_number"]) : $data["customer_number"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::USERNAME, is_bool($data["username"]) ? (int) ($data["username"]) : $data["username"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::PASSWORD, is_bool($data["password"]) ? (int) ($data["password"]) : $data["password"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::TEST_USERNAME, is_bool($data["test_username"]) ? (int) ($data["test_username"]) : $data["test_username"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::TEST_PASSWORD, is_bool($data["test_password"]) ? (int) ($data["test_password"]) : $data["test_password"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::QUOTE_TYPE_COMMERCIAL, is_bool($data["quote_type_commercial"]) ? (int) ($data["quote_type_commercial"]) : $data["quote_type_commercial"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::CONTRACT_ID, is_bool($data["contract_id"]) ? (int) ($data["contract_id"]) : $data["contract_id"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::INSURANCE, is_bool($data["insurance"]) ? (int) ($data["insurance"]) : $data["insurance"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::ORIGIN_POSTALCODE, is_bool($data["origin_postalcode"]) ? (int) ($data["origin_postalcode"]) : $data["origin_postalcode"]);
            CanadaPost::setConfigValue(CanadaPostConfigValue::DISALLOWED_SERVICES, is_bool($data["disallowed_services"]) ? (int) ($data["disallowed_services"]) : $data["disallowed_services"]);
        } catch (FormValidationException $ex) {
            // Invalid data entered
            $errorMessage = $this->createStandardFormValidationErrorMessage($ex);
        } catch (\Exception $ex) {
            // Any other error
            $errorMessage = $this->getTranslator()->trans('Sorry, an error occurred: %err', ['%err' => $ex->getMessage()], [], CanadaPost::MESSAGE_DOMAIN);
        }

        if (null !== $errorMessage) {
            // Mark the form as with error
            $baseForm->setErrorMessage($errorMessage);

            // Send the form and the error to the parser
            $this->getParserContext()
                ->addForm($baseForm)
                ->setGeneralError($errorMessage)
            ;
        } else {
            $this->getParserContext()
                ->set("success", true)
            ;
        }

        return $this->defaultAction();
    }
}
